{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport { gsap, Power1, Power2, power3, Expo } from 'gsap';\nexport default {\n  name: 'Intro',\n  props: {},\n  setup() {\n    const visualShow = () => {\n      const tl = gsap.timeline({\n        id: 'Timeline'\n      });\n      const colors = ['#f1f1f1', '#181818', '#c33130'];\n      function tween(node) {\n        let path = node;\n        const delay = Math.random() * 1;\n        const length = path.getTotalLength();\n        colors.forEach((color, index) => {\n          if (index !== 0) {\n            path = path.cloneNode();\n            node.parentNode.appendChild(path);\n          }\n          path.setAttribute('fill', color);\n          tl.set(path, {\n            // strokeDasharray: length + 0.5,\n            // strokeDashoffset: length + 0.6,\n            // autoRound: false\n          }, 0);\n          tl.to(path, {\n            fill: color,\n            // strokeDashoffset: 1,\n            // autoRound: false,\n            // duration: 1.2,\n            ease: 'Expo.Inout'\n          }, index * 0.25 + delay);\n        });\n      }\n      document.querySelectorAll('.motion path, .motion line').forEach(p => tween(p));\n    };\n    onMounted(() => {\n      // visualShow();\n    });\n    return {\n      visualShow\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","gsap","Power1","Power2","power3","Expo","name","props","setup","visualShow","tl","timeline","id","colors","tween","node","path","delay","Math","random","length","getTotalLength","forEach","color","index","cloneNode","parentNode","appendChild","setAttribute","set","to","fill","ease","document","querySelectorAll","p"],"sources":["C:\\Rico\\portfilo2023\\src\\components\\Layouts\\Main\\Hero.vue"],"sourcesContent":["<template>\r\n  <section class=\"hero\">\r\n    <div class=\"inner\">\r\n      <h2 class=\"hero--title\">\r\n        <div class=\"hero--text\">\r\n              <em>Radiant</em>\r\n              <em>Inspirational</em>\r\n              <em>Inspirational</em>\r\n              <em>Optimistic</em>\r\n        </div>\r\n      </h2>\r\n      <div class=\"hero--layout\">\r\n        <div class=\"hero--slogan\">미래를 꿈꾸며<br /> 끊임없이 도전하라.</div>\r\n        <div class=\"hero--description\">한 번에 하나의 사용자 인터페이스<br />디지털 세상 만들기</div>\r\n\r\n      </div>\r\n    </div>\r\n  </section>\r\n</template>\r\n    \r\n<script>\r\nimport { ref, onMounted } from 'vue';\r\nimport { gsap, Power1, Power2, power3, Expo } from 'gsap';\r\n\r\nexport default {\r\n  name: 'Intro',\r\n  props: {\r\n  },\r\n\r\n  setup() {\r\n\r\n\r\n    const visualShow = () => {\r\n      const tl = gsap.timeline({ id: 'Timeline' });\r\n      const colors = ['#f1f1f1', '#181818', '#c33130'];\r\n\r\n      function tween(node) {\r\n        let path = node;\r\n        const delay = Math.random() * 1;\r\n        const length = path.getTotalLength();\r\n        colors.forEach((color, index) => {\r\n          if (index !== 0) {\r\n            path = path.cloneNode();\r\n            node.parentNode.appendChild(path);\r\n          }\r\n          path.setAttribute('fill', color);\r\n          tl.set(path, {\r\n            // strokeDasharray: length + 0.5,\r\n            // strokeDashoffset: length + 0.6,\r\n            // autoRound: false\r\n          }, 0);\r\n          tl.to(path, {\r\n            fill: color,\r\n            // strokeDashoffset: 1,\r\n            // autoRound: false,\r\n            // duration: 1.2,\r\n            ease: 'Expo.Inout'\r\n          }, index * 0.25 + delay);\r\n        });\r\n      }\r\n\r\n      document.querySelectorAll('.motion path, .motion line').forEach(p => tween(p));\r\n\r\n    }\r\n\r\n    onMounted(() => {\r\n      // visualShow();\r\n    })\r\n\r\n    return {\r\n      visualShow\r\n    };\r\n  }\r\n\r\n}\r\n</script>\r\n    \r\n<style lang=\"scss\" scoped>\r\n@import \"@/assets/scss/__variables.scss\";\r\n\r\n.hero {\r\n  position: relative;\r\n  justify-content: center;\r\n\r\n  .inner {\r\n    display: block;\r\n  }\r\n\r\n  &--text{\r\n    position: relative;\r\n    padding-bottom: vw(750px);\r\n    em{\r\n      position: absolute;\r\n      top:50%;\r\n      left:50%;\r\n      transform: translate(-50%, -50%);\r\n      font-size:vw(200px);\r\n      color: $dpColor;\r\n      font-weight: bold;\r\n    }\r\n  }\r\n\r\n  &--layout {\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  &--slogan {\r\n    font-size: vw(30px);\r\n    color: $dpColor;\r\n    font-weight: 600;\r\n    line-height: 1.3;\r\n    font-family: 'Noto Sans Korean';\r\n  }\r\n\r\n  &--description {\r\n    font-size: vw(30px);\r\n    color: $dpColor;\r\n    font-weight: 600;\r\n    line-height: 1.3;\r\n    font-family: 'Noto Sans Korean';\r\n    text-align: right;\r\n  }\r\n\r\n\r\n}\r\n</style>\r\n    "],"mappings":"AAqBA,SAASA,GAAG,EAAEC,SAAQ,QAAS,KAAK;AACpC,SAASC,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,IAAG,QAAS,MAAM;AAEzD,eAAe;EACbC,IAAI,EAAE,OAAO;EACbC,KAAK,EAAE,CACP,CAAC;EAEDC,KAAKA,CAAA,EAAG;IAGN,MAAMC,UAAS,GAAIA,CAAA,KAAM;MACvB,MAAMC,EAAC,GAAIT,IAAI,CAACU,QAAQ,CAAC;QAAEC,EAAE,EAAE;MAAW,CAAC,CAAC;MAC5C,MAAMC,MAAK,GAAI,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;MAEhD,SAASC,KAAKA,CAACC,IAAI,EAAE;QACnB,IAAIC,IAAG,GAAID,IAAI;QACf,MAAME,KAAI,GAAIC,IAAI,CAACC,MAAM,CAAC,IAAI,CAAC;QAC/B,MAAMC,MAAK,GAAIJ,IAAI,CAACK,cAAc,CAAC,CAAC;QACpCR,MAAM,CAACS,OAAO,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;UAC/B,IAAIA,KAAI,KAAM,CAAC,EAAE;YACfR,IAAG,GAAIA,IAAI,CAACS,SAAS,CAAC,CAAC;YACvBV,IAAI,CAACW,UAAU,CAACC,WAAW,CAACX,IAAI,CAAC;UACnC;UACAA,IAAI,CAACY,YAAY,CAAC,MAAM,EAAEL,KAAK,CAAC;UAChCb,EAAE,CAACmB,GAAG,CAACb,IAAI,EAAE;YACX;YACA;YACA;UAAA,CACD,EAAE,CAAC,CAAC;UACLN,EAAE,CAACoB,EAAE,CAACd,IAAI,EAAE;YACVe,IAAI,EAAER,KAAK;YACX;YACA;YACA;YACAS,IAAI,EAAE;UACR,CAAC,EAAER,KAAI,GAAI,IAAG,GAAIP,KAAK,CAAC;QAC1B,CAAC,CAAC;MACJ;MAEAgB,QAAQ,CAACC,gBAAgB,CAAC,4BAA4B,CAAC,CAACZ,OAAO,CAACa,CAAA,IAAKrB,KAAK,CAACqB,CAAC,CAAC,CAAC;IAEhF;IAEAnC,SAAS,CAAC,MAAM;MACd;IAAA,CACD;IAED,OAAO;MACLS;IACF,CAAC;EACH;AAEF"},"metadata":{},"sourceType":"module","externalDependencies":[]}