{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport { gsap, Power1, Power2, power3 } from 'gsap';\nexport default {\n  name: 'Intro',\n  props: {},\n  setup() {\n    const visualShow = () => {\n      const tl = gsap.timeline({\n        id: 'Timeline'\n      });\n      const colors = ['#f1f1f1', '#181818', '#c33130'];\n      function tween(node) {\n        let path = node;\n        const delay = Math.random() * 1;\n        const length = path.getTotalLength();\n        colors.forEach((color, index) => {\n          if (index !== 0) {\n            path = path.cloneNode();\n            node.parentNode.appendChild(path);\n          }\n          path.setAttribute('stroke', color);\n          tl.set(path, {\n            strokeDasharray: length + 0.5,\n            strokeDashoffset: length + 0.6,\n            autoRound: false\n          }, 0);\n          tl.to(path, {\n            strokeDashoffset: 0,\n            autoRound: false,\n            duration: 1.2,\n            ease: 'power3.out'\n          }, index * 0.25 + delay);\n        });\n      }\n      document.querySelectorAll('.motion path, .motion line').forEach(p => tween(p));\n    };\n    onMounted(() => {\n      // visualShow();\n    });\n    return {\n      visualShow\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","gsap","Power1","Power2","power3","name","props","setup","visualShow","tl","timeline","id","colors","tween","node","path","delay","Math","random","length","getTotalLength","forEach","color","index","cloneNode","parentNode","appendChild","setAttribute","set","strokeDasharray","strokeDashoffset","autoRound","to","duration","ease","document","querySelectorAll","p"],"sources":["C:\\Rico\\portfilo2023\\src\\components\\Layouts\\Main\\Hero.vue"],"sourcesContent":["<template>\r\n  <section class=\"hero\">\r\n    <div class=\"inner\">\r\n      <h2 class=\"hero--title\">\r\n\r\n        <svg class=\"motion\" viewBox=\"0 0 1150 280.7\">\r\n          <g>\r\n            <path d=\"M110.7 117.03L85.59 83.64c13.01-5.37 22.18-18.08 22.18-32.87c0-19.63-16.13-35.61-35.96-35.61H33.95c-.15 0-.28.06-.42.09h-6.46c-1.24 0-2.24 1-2.24 2.24v100.96c0 1.24 1 2.24 2.24 2.24h21.89c1.24 0 2.24-1 2.24-2.24V86.37h8.64l25.2 33.51c.45.59 1.15.94 1.89.94h21.89c.9 0 1.72-.51 2.11-1.31c.4-.8.31-1.76-.23-2.48zM70.12 65.38c-.36.03-.72.06-1.08.06H51.57c-.05 0-.09-.04-.14-.06c-.09-.02-.18-.04-.24-.1a.577.577 0 0 1-.21-.43V36.67c0-.17.08-.32.21-.43c.06-.05.14-.07.22-.09c.06-.02.1-.07.16-.07h17.46c.42 0 .84.03 1.25.07c7.22.66 12.9 6.96 12.9 14.61c.01 7.72-5.76 14.04-13.06 14.62z\" fill=\"blue\" />\r\n  \r\n            <!-- <path d=\"M46,233V59\" />\r\n            <path d=\"M46,59l85,115l87-115\" />\r\n            <path d=\"M218,59v174\" /> -->\r\n          </g>\r\n          <g>\r\n            <path d=\"M354,233c-51,0-93-42-93-93c0-52,42-94,93-94\" />\r\n            <path d=\"M354,233c52,0,93-42,93-93c0-52-41-94-93-94\" />\r\n          </g>\r\n          <g>\r\n            <line x1=\"563\" y1=\"232.5\" x2=\"563\" y2=\"59\" />\r\n            <line x1=\"490\" y1=\"59.1\" x2=\"636\" y2=\"59.1\" />\r\n          </g>\r\n          <g>\r\n            <path d=\"M682,233.1v-174\" />\r\n          </g>\r\n          <g>\r\n            <path d=\"M914,140c0-52-41-94-93-94c-51,0-93,42-93,94\" />\r\n            <path d=\"M914,140c0,51-41,93-93,93c-51,0-93-42-93-93\" />\r\n          </g>\r\n          <g>\r\n            <path d=\"M957,233V59\" />\r\n            <path d=\"M957,59l147,174\" />\r\n            <path d=\"M1104,233V59\" />\r\n          </g>\r\n        </svg>\r\n      </h2>\r\n      <div class=\"hero--layout\">\r\n        <div class=\"hero--slogan\">미래를 꿈꾸며<br /> 끊임없이 도전하라.</div>\r\n        <div class=\"hero--description\">한 번에 하나의 사용자 인터페이스<br />디지털 세상 만들기</div>\r\n\r\n      </div>\r\n    </div>\r\n  </section>\r\n</template>\r\n    \r\n<script>\r\nimport { ref, onMounted } from 'vue';\r\nimport { gsap, Power1, Power2, power3 } from 'gsap';\r\n\r\nexport default {\r\n  name: 'Intro',\r\n  props: {\r\n  },\r\n\r\n  setup() {\r\n\r\n\r\n    const visualShow = () => {\r\n      const tl = gsap.timeline({\r\n        id: 'Timeline',\r\n      });\r\n      const colors = ['#f1f1f1', '#181818', '#c33130'];\r\n\r\n      function tween(node) {\r\n        let path = node;\r\n        const delay = Math.random() * 1;\r\n        const length = path.getTotalLength();\r\n        colors.forEach((color, index) => {\r\n          if (index !== 0) {\r\n            path = path.cloneNode();\r\n            node.parentNode.appendChild(path);\r\n          }\r\n          path.setAttribute('stroke', color);\r\n          tl.set(path, {\r\n            strokeDasharray: length + 0.5,\r\n            strokeDashoffset: length + 0.6,\r\n            autoRound: false\r\n          }, 0);\r\n          tl.to(path, {\r\n            strokeDashoffset: 0,\r\n            autoRound: false,\r\n            duration: 1.2,\r\n            ease: 'power3.out'\r\n          }, index * 0.25 + delay);\r\n        });\r\n      }\r\n\r\n      document.querySelectorAll('.motion path, .motion line').forEach(p => tween(p));\r\n\r\n    }\r\n\r\n    onMounted(() => {\r\n      // visualShow();\r\n    })\r\n\r\n    return {\r\n      visualShow\r\n    };\r\n  }\r\n\r\n}\r\n</script>\r\n    \r\n<style lang=\"scss\" scoped>\r\n@import \"@/assets/scss/__variables.scss\";\r\n\r\n.hero {\r\n  position: relative;\r\n  justify-content: center;\r\n\r\n  .inner {\r\n    display: block;\r\n  }\r\n\r\n  &--title {\r\n    display: flex;\r\n    padding-top: vw(120px);\r\n\r\n    svg {\r\n      width: 100%;\r\n      height: auto;\r\n\r\n      line,\r\n      path {\r\n        stroke-width: 32px;\r\n        stroke-linecap: round;\r\n        stroke-linejoin: round;\r\n        fill: none;\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  &--layout {\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  &--slogan {\r\n    font-size: vw(30px);\r\n    color: $dpColor;\r\n    font-weight: 600;\r\n    line-height: 1.3;\r\n    font-family: 'Noto Sans Korean';\r\n  }\r\n\r\n  &--description {\r\n    font-size: vw(30px);\r\n    color: $dpColor;\r\n    font-weight: 600;\r\n    line-height: 1.3;\r\n    font-family: 'Noto Sans Korean';\r\n    text-align: right;\r\n  }\r\n\r\n\r\n}\r\n</style>\r\n    "],"mappings":"AA6CA,SAASA,GAAG,EAAEC,SAAQ,QAAS,KAAK;AACpC,SAASC,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAK,QAAS,MAAM;AAEnD,eAAe;EACbC,IAAI,EAAE,OAAO;EACbC,KAAK,EAAE,CACP,CAAC;EAEDC,KAAKA,CAAA,EAAG;IAGN,MAAMC,UAAS,GAAIA,CAAA,KAAM;MACvB,MAAMC,EAAC,GAAIR,IAAI,CAACS,QAAQ,CAAC;QACvBC,EAAE,EAAE;MACN,CAAC,CAAC;MACF,MAAMC,MAAK,GAAI,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;MAEhD,SAASC,KAAKA,CAACC,IAAI,EAAE;QACnB,IAAIC,IAAG,GAAID,IAAI;QACf,MAAME,KAAI,GAAIC,IAAI,CAACC,MAAM,CAAC,IAAI,CAAC;QAC/B,MAAMC,MAAK,GAAIJ,IAAI,CAACK,cAAc,CAAC,CAAC;QACpCR,MAAM,CAACS,OAAO,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;UAC/B,IAAIA,KAAI,KAAM,CAAC,EAAE;YACfR,IAAG,GAAIA,IAAI,CAACS,SAAS,CAAC,CAAC;YACvBV,IAAI,CAACW,UAAU,CAACC,WAAW,CAACX,IAAI,CAAC;UACnC;UACAA,IAAI,CAACY,YAAY,CAAC,QAAQ,EAAEL,KAAK,CAAC;UAClCb,EAAE,CAACmB,GAAG,CAACb,IAAI,EAAE;YACXc,eAAe,EAAEV,MAAK,GAAI,GAAG;YAC7BW,gBAAgB,EAAEX,MAAK,GAAI,GAAG;YAC9BY,SAAS,EAAE;UACb,CAAC,EAAE,CAAC,CAAC;UACLtB,EAAE,CAACuB,EAAE,CAACjB,IAAI,EAAE;YACVe,gBAAgB,EAAE,CAAC;YACnBC,SAAS,EAAE,KAAK;YAChBE,QAAQ,EAAE,GAAG;YACbC,IAAI,EAAE;UACR,CAAC,EAAEX,KAAI,GAAI,IAAG,GAAIP,KAAK,CAAC;QAC1B,CAAC,CAAC;MACJ;MAEAmB,QAAQ,CAACC,gBAAgB,CAAC,4BAA4B,CAAC,CAACf,OAAO,CAACgB,CAAA,IAAKxB,KAAK,CAACwB,CAAC,CAAC,CAAC;IAEhF;IAEArC,SAAS,CAAC,MAAM;MACd;IAAA,CACD;IAED,OAAO;MACLQ;IACF,CAAC;EACH;AAEF"},"metadata":{},"sourceType":"module","externalDependencies":[]}