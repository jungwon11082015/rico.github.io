{"ast":null,"code":"import { ref, onMounted, onBeforeUpdate } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { useDataStore } from '@/store/index';\nimport { storage } from '@/firebase/init.js';\nimport { ref as storageRef, getDownloadURL } from 'firebase/storage';\nimport axios from 'axios';\nimport Pagination from '@/components/Layouts/common/Pagination.vue';\nimport Skeletor from \"@/components/Layouts/common/Skeleton.vue\";\nexport default {\n  name: 'worksView',\n  props: {},\n  components: {\n    Pagination,\n    Skeletor\n  },\n  setup(props) {\n    const route = useRoute();\n    const itemsStore = useDataStore();\n    let hasFetchedData = false;\n    const fetchWorkItems = async () => {\n      if (!hasFetchedData) {\n        const storageInstance = storage;\n        const jsonFileRef = storageRef(storageInstance, `works.json`);\n        try {\n          const downloadURL = await getDownloadURL(jsonFileRef);\n          const res = await axios.get(downloadURL);\n          const workitems = res.data;\n          itemsStore.workItemsObj(workitems);\n          hasFetchedData = true;\n        } catch (error) {\n          console.error(\"Error fetching data:\", error);\n        }\n      }\n    };\n    const changePage = page => {\n      currentPage.value = page;\n    };\n    const currentViewPage = curtPage => {\n      currentPage.value = curtPage;\n    };\n    onBeforeUpdate(() => {\n      fetchWorkItems();\n    });\n    onMounted(() => {\n      fetchWorkItems();\n    });\n    onMounted(() => {\n      hasFetchedData = false;\n    });\n    return {\n      routeParamsId: Number(route.params.id),\n      currentPage,\n      totalPages,\n      prevPageData,\n      nextPageData,\n      itemsStore,\n      changePage,\n      hasFetchedData\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","onBeforeUpdate","useRoute","useDataStore","storage","storageRef","getDownloadURL","axios","Pagination","Skeletor","name","props","components","setup","route","itemsStore","hasFetchedData","fetchWorkItems","storageInstance","jsonFileRef","downloadURL","res","get","workitems","data","workItemsObj","error","console","changePage","page","currentPage","value","currentViewPage","curtPage","routeParamsId","Number","params","id","totalPages","prevPageData","nextPageData"],"sources":["C:\\Rico\\portfilo2023\\src\\views\\Work\\View.vue"],"sourcesContent":["<template>\r\n    <div id=\"work\">\r\n      <template v-if=\"!hasFetchedData\">\r\n        <div class=\"work_visual\">\r\n          <img :src=\"jsonData.view?.viewBigImgSrc\" :alt=\"jsonData.project\">\r\n        </div>\r\n      </template>\r\n      <template v-else>\r\n        <Skeletor  :SkeletorType=\"`card`\"/>\r\n      </template>\r\n     \r\n\r\n      <div class=\"inner\">\r\n        <section class=\"overview\">\r\n          <div class=\"text_inner\">\r\n            <div class=\"overview_title_box\">\r\n              <em class=\"title\">OVERVIEW</em> \r\n               <h2 v-dompurify-html=\"jsonData.view?.overviewTitle\"></h2>\r\n            </div>\r\n            <div class=\"overview_text_box\">\r\n              <dl v-for=\"(item, index) in jsonData.view?.websiteInfo\" :key=\"index\">\r\n                <dt >{{ item.title }}</dt>\r\n                <dd>{{ item.description }}</dd>\r\n                <!-- <dd>{{ subItem.subText }}</dd> -->\r\n              </dl>\r\n            </div>\r\n          </div>\r\n        </section>\r\n        <section class=\"mission\">\r\n          <div class=\"text_inner\">\r\n              <em class=\"title\">MISSION</em>\r\n              <h3 v-dompurify-html=\"jsonData.view?.middleTitle\"></h3>\r\n              <img :src=\"jsonData.view?.middleBigImgSrc\" alt=\"\">\r\n          </div>\r\n        </section>\r\n\r\n        <section class=\"goals\">\r\n          <div class=\"text_inner\">\r\n            <em class=\"title\">PROJECT GOALS</em>\r\n            <ol class=\"goals_list\">\r\n              <li v-for=\"(subItem, index) in  jsonData.view?.defineList\" :key=\"index\">\r\n                <dl>\r\n                  <dt>0{{index+1 }}</dt>\r\n                  <dd v-dompurify-html=\"subItem.title\"></dd>\r\n                  <dd>{{ subItem.description}}</dd>\r\n                </dl>\r\n              </li>\r\n            </ol>\r\n          </div>\r\n    \r\n        </section>\r\n      </div>\r\n\r\n      <Pagination />\r\n\r\n      <!-- <Pagination\r\n        :current-page=\"currentPage\"\r\n        :total-pages=\"totalPages\"\r\n        :prev-PageData=\"prevPageData\"\r\n        :next-PageData=\"nextPageData\"\r\n        @page-change=\"changePage\"\r\n      /> -->\r\n    </div>\r\n  </template>\r\n    \r\n  <script>\r\n  import { ref,  onMounted, onBeforeUpdate  } from 'vue';\r\n  import { useRoute  } from 'vue-router';\r\n  import { useDataStore } from '@/store/index'\r\n  import { storage } from '@/firebase/init.js';\r\n  import { ref as storageRef, getDownloadURL } from 'firebase/storage';\r\n  import axios from 'axios'\r\n  import Pagination from '@/components/Layouts/common/Pagination.vue'\r\n  import Skeletor from \"@/components/Layouts/common/Skeleton.vue\";\r\n  export default {\r\n    name: 'worksView',\r\n    props: {\r\n    },\r\n    components: { \r\n      Pagination,\r\n      Skeletor\r\n    },\r\n    setup(props) {\r\n      const route = useRoute();\r\n      const itemsStore = useDataStore();\r\n      let hasFetchedData = false;\r\n\r\n\r\n\r\n      const fetchWorkItems = async () => {  \r\n        if (!hasFetchedData) {\r\n          const storageInstance = storage;\r\n          const jsonFileRef = storageRef(storageInstance, `works.json`);\r\n\r\n          try {\r\n              const downloadURL = await getDownloadURL(jsonFileRef);\r\n              const res = await axios.get(downloadURL);\r\n              const workitems = res.data;\r\n              itemsStore.workItemsObj(workitems);\r\n\r\n              hasFetchedData = true; \r\n\r\n          } catch (error) {\r\n              console.error(\"Error fetching data:\", error);\r\n          }\r\n        }\r\n     \r\n      };\r\n\r\n      const changePage = ( page ) => {\r\n        currentPage.value = page;\r\n      }\r\n      \r\n      const currentViewPage = (curtPage) =>{\r\n        currentPage.value = curtPage;\r\n      }\r\n      onBeforeUpdate( () =>{\r\n        fetchWorkItems();\r\n      })\r\n      onMounted(() => {\r\n        fetchWorkItems();\r\n      });\r\n      onMounted( ()=>{\r\n          hasFetchedData = false;\r\n      })\r\n\r\n      return {\r\n        routeParamsId:  Number(route.params.id),\r\n        currentPage,\r\n        totalPages,\r\n        prevPageData,\r\n        nextPageData,\r\n        itemsStore,\r\n        changePage,\r\n        hasFetchedData\r\n       \r\n      };\r\n    },\r\n  }\r\n  </script>\r\n    \r\n  <style lang=\"scss\" scoped>\r\n  @import \"@/assets/scss/__variables.scss\";\r\n  #work {\r\n    .work_visual{\r\n      >img{ width: 100%; }\r\n    }\r\n    .inner{\r\n      display: block;\r\n      .text_inner{\r\n        display: flex;\r\n        padding:vw( 100px);\r\n        justify-content: space-between;\r\n        align-items:center;\r\n        .overview_title_box{\r\n          width: 55%;\r\n          .title{ \r\n            display:block;\r\n            font-size:vw(26px);\r\n            margin-bottom: vw(10px);\r\n            color: $dpColor;\r\n            font-weight: 600;\r\n          }\r\n          h2{\r\n            font-size:vw(40px);\r\n            font-family: 'Noto Sans Korean';\r\n            font-weight: bold;\r\n            line-height: 1.35;\r\n          }\r\n        }\r\n        .overview_text_box{\r\n          width: 45%;\r\n          dl{\r\n            dt{\r\n              margin-bottom: vw(16px);\r\n              font-size:vw(24px);\r\n              font-family: 'Noto Sans Korean';\r\n              font-weight: bold;\r\n            }\r\n            dd{\r\n              margin-bottom: vw(24px);\r\n              font-size:vw(22px);\r\n              font-family: 'Noto Sans Korean';\r\n              line-height: 1.35;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      .mission{\r\n        display: block;\r\n        .text_inner{\r\n          display: block;\r\n          position: relative;\r\n          .title{ \r\n            display:block;\r\n            font-size:vw(26px);\r\n            padding-top: vw(120px);\r\n            margin-bottom: vw(30px);\r\n            color: $dpColor;\r\n            font-weight: 600;\r\n          }\r\n          h3{\r\n            display: inline-block;\r\n            position: relative;\r\n            font-size:vw(50px);\r\n            font-family: 'Noto Sans Korean';\r\n            font-weight: bold;\r\n            line-height: 1.2;\r\n            z-index: 2;\r\n            &:after{\r\n              content: '';\r\n              display: block;\r\n              position: absolute;\r\n              bottom:0;\r\n              left:-15%; \r\n              width: 100%;\r\n              height: 72%;\r\n              background: #fff;\r\n              z-index: -1;\r\n            }\r\n          }\r\n          img{\r\n            position: absolute;\r\n            top:0;\r\n            left:0;\r\n            width: 100%;\r\n          }\r\n        }\r\n      }\r\n      .goals{\r\n        flex-direction:row;\r\n        justify-content: space-between;\r\n        .text_inner{\r\n          padding:vw( 100px);\r\n          align-items: start;\r\n          .title{\r\n            display:block;\r\n            font-size:vw(26px);\r\n            color: $dpColor;\r\n            font-weight: 600;\r\n          }\r\n          .goals_list{\r\n            display: flex;\r\n            flex: 1;\r\n            margin-left: vw(100px);\r\n            li{\r\n              dl{\r\n             \r\n                dt{\r\n                  margin-right: vw(18px);\r\n                  float: left; \r\n                  font-size:vw(24px);\r\n                  font-weight: bold;\r\n                  color: $dpColor;\r\n                  height: vw(150px);\r\n                  &+dd{\r\n                    margin-top:vw(-8px);\r\n                    font-size:vw(30px);\r\n                    font-weight: bold;\r\n                  }\r\n                }\r\n                dd{\r\n                  margin-top: vw(14px);\r\n                  float: left;\r\n                  width: 80%;\r\n                  font-size: vw(18px);\r\n                  line-height: 1.35;\r\n                  font-family: 'Noto Sans Korean';\r\n                }\r\n                &:after{\r\n                  content: '';\r\n                  display: block;\r\n                  clear: both;\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n        }\r\n      }\r\n    }\r\n   \r\n  }\r\n  </style> \r\n    "],"mappings":"AAkEE,SAASA,GAAG,EAAGC,SAAS,EAAEC,cAAa,QAAU,KAAK;AACtD,SAASC,QAAO,QAAU,YAAY;AACtC,SAASC,YAAW,QAAS,eAAc;AAC3C,SAASC,OAAM,QAAS,oBAAoB;AAC5C,SAASL,GAAE,IAAKM,UAAU,EAAEC,cAAa,QAAS,kBAAkB;AACpE,OAAOC,KAAI,MAAO,OAAM;AACxB,OAAOC,UAAS,MAAO,4CAA2C;AAClE,OAAOC,QAAO,MAAO,0CAA0C;AAC/D,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,KAAK,EAAE,CACP,CAAC;EACDC,UAAU,EAAE;IACVJ,UAAU;IACVC;EACF,CAAC;EACDI,KAAKA,CAACF,KAAK,EAAE;IACX,MAAMG,KAAI,GAAIZ,QAAQ,CAAC,CAAC;IACxB,MAAMa,UAAS,GAAIZ,YAAY,CAAC,CAAC;IACjC,IAAIa,cAAa,GAAI,KAAK;IAI1B,MAAMC,cAAa,GAAI,MAAAA,CAAA,KAAY;MACjC,IAAI,CAACD,cAAc,EAAE;QACnB,MAAME,eAAc,GAAId,OAAO;QAC/B,MAAMe,WAAU,GAAId,UAAU,CAACa,eAAe,EAAG,YAAW,CAAC;QAE7D,IAAI;UACA,MAAME,WAAU,GAAI,MAAMd,cAAc,CAACa,WAAW,CAAC;UACrD,MAAME,GAAE,GAAI,MAAMd,KAAK,CAACe,GAAG,CAACF,WAAW,CAAC;UACxC,MAAMG,SAAQ,GAAIF,GAAG,CAACG,IAAI;UAC1BT,UAAU,CAACU,YAAY,CAACF,SAAS,CAAC;UAElCP,cAAa,GAAI,IAAI;QAEzB,EAAE,OAAOU,KAAK,EAAE;UACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAChD;MACF;IAEF,CAAC;IAED,MAAME,UAAS,GAAMC,IAAG,IAAO;MAC7BC,WAAW,CAACC,KAAI,GAAIF,IAAI;IAC1B;IAEA,MAAMG,eAAc,GAAKC,QAAQ,IAAI;MACnCH,WAAW,CAACC,KAAI,GAAIE,QAAQ;IAC9B;IACAhC,cAAc,CAAE,MAAK;MACnBgB,cAAc,CAAC,CAAC;IAClB,CAAC;IACDjB,SAAS,CAAC,MAAM;MACdiB,cAAc,CAAC,CAAC;IAClB,CAAC,CAAC;IACFjB,SAAS,CAAE,MAAI;MACXgB,cAAa,GAAI,KAAK;IAC1B,CAAC;IAED,OAAO;MACLkB,aAAa,EAAGC,MAAM,CAACrB,KAAK,CAACsB,MAAM,CAACC,EAAE,CAAC;MACvCP,WAAW;MACXQ,UAAU;MACVC,YAAY;MACZC,YAAY;MACZzB,UAAU;MACVa,UAAU;MACVZ;IAEF,CAAC;EACH;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}